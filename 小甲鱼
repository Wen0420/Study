IDLE is Python's Integrated Development and Learning Environment.

alt+n 回到上条指令,alt+p回到下条指令

""双引号括起来是字符串就是是文本

#\n是换行符

tab 的功能：缩进和提示，
        tab 缩进的意思是，编程时按键盘的tab键会自动打4个空格

= 是赋值
== 判断是否相等

#P3
input是BIF：Builtin Function 内置函数
temp = 是字符串变量，python 的变量是没有分类型的，一个参数

if后面=8，那么执行缩进内容

int 函数可以把字符串类型的数字进行转换成可以比较大小和运算的数字。

#P4
变量
    使用变量时要先赋值

    变量名可以包括字母,数字,下划线,但不能以数字开头

字符串
    引号内的一切东西

    字符串 + 就是拼接

    如果字符串中需要出现但引号或双引号怎么办?
        -使用转义符号 \ e.g. let's go => let\'s go

    \ 打印后面符号 & 还可将一个语句可以分成多行书写
    \n 换行
    r''原始字符串:能打印引号里的所有内容包括 符号

#P5
 给游戏改进，1.加提示：是大了还是小了？
                   #条件分支
                  > 大于      给出的ture false 判断
                  >= 大于等于
                  == 等于
            2.多给几次猜测的机会,
                    Python 的while 循环语法：
                    while 条件句：
                            条件为真（True）执行的操作。
                            条件为False就不执行循环体内的内容。
                2.1 三次不对就结束游戏

            3.希望程序的答案是随机的
                引入： random 模块 run module
                random 模块里面有一个函数叫做：
                randint(),它会返回一个随机的整数

             # print()默认是打印完字符串会自动添加一个换行符，end=" "参数告诉print()用空格代替换行
             times = times - 1  # 用户每输入一次，可用机会就-1

            and 使用and逻辑操作符，可以将任意表达式链接到一起，并得到一个布尔类型的值。

            比较运算符优先于逻辑运算符
            3>2 and 1<2
            true

#P6 数据类型
        数值类型：整形 int() ;浮点数转int a= 5.99, int(a) = 5
        浮点型： 小数 float() 字符串或整数转换为浮点型 float('520') = 520.0
        e记法：科学计数法（会变成浮点型）
        布尔类型
        字符串 str() 将数字或其他类型转换成字符串类型 str(a) = '5.99'
    判断数据类型：
        type()
            a = '520'
            > class 'str'
            type(5.2)
            >class 'float'
            type(true)
            >class 'bool'
            type(5e15)
            >class 'float'

       isinstance() 待确定和指定类型的参数，返回的是布尔代数的值， ture 是两个参数类型一致 false是两个参数类型不一致
            a = '小甲鱼'
            isinstance(a, str)
            >True
            isinstance(320, int)
            >True

#7 常用操作符
       算术操作符
           a = 5
           a = a + 3 等于 a += 3 指 a 加的部分是3
           a = b = c = d = 10 指  a = 10, b = 10,...
            // floor 地板除法 整数除以整数等于整数
            %  取余
            ** 幂运算
       逻辑操作符
            and 左右为真才为真，其余为假
            or 左或右任一为真即为真， 都为假即假
            not 取相反的布尔类型的值


     input() 的返回值始终是字符串，所以 type(temp) 永远是 <class 'str'>
        s 为字符串：

        s.isalnum()  所有字符都是数字或者字母，为真返回 True，否则返回 False。

        s.isalpha()   所有字符都是字母，为真返回 True，否则返回 False。

        s.isdigit()     所有字符都是数字，为真返回 True，否则返回 False。

        s.islower()    所有字符都是小写，为真返回 True，否则返回 False。

        s.isupper()   所有字符都是大写，为真返回 True，否则返回 False。

        s.istitle()      所有单词都是首字母大写，为真返回 True，否则返回 False。

        s.isspace()   所有字符都是空白字符，为真返回 True，否则返回 False。

        >>> s = 'I LOVE FISHC'
        >>> s.isupper()
        >>> True

#p8 分支和循环1

打飞机框架：

    加载背景音乐
    播放背景音乐（设置单曲循环）
    我方飞机诞生
  interval = 0

  while True:
    if 用户是否点击关闭按钮
        退出程序

    interval += 1
    if interval == 50:
        interval = 0
        小飞机诞生


    小飞机移动一个位置
    屏幕刷新

    if 用户鼠标产生移动：
        我方飞机中心位置 = 用户鼠标位置
        屏幕刷新

    if 我方飞机与小飞机发生肢体冲突：
        我方挂， 播放飞机撞击音乐
        修改我放飞机图案
        打印“Game Over”
        停止背景音乐，最好淡出

#9 分支与循环2
    题目：
    按照100分制，90分以上成绩为A， 80到90分成绩为B， 60到80成绩为C，60以下为D，
    写一个程序，当用户输入分数， 自动转换为ABCD的形式打印。

    elif
     假设第一次判断会消耗一个CPU的时间

     什么叫悬挂“else”
     在语言中：
     if (hi > 2)
        if(hi > 7)
            print("Great!");
     else
        printf("Qie~~")
     这里的else 会使用就近原则。

     条件表达式（三元操作符）-- 操作符指的就是操作数目
        有了这个三元操作符的表达式，你就可以使用一条语句来完成以下的条件判断和赋值操作：
        x, y = 4, 5
        if x < y:
            small = x
        else:
            small = y
        #* 例子可以改进为
        small = x if x < y else y
     三元操作符的语法：
     x if 条件 else y

    Assert (断言)
    当assert 这个关键字后边的条件为假的时候，程序自动抛出AssertionError 的异常。
    ***一般来说我们可以用Ta在程序中置入检查点，当需要确保程序中的某个条件一定为真才能让程序正常工作。assert 关键字就能非常有用。

#10 分支与循环3（循环）

 while 条件 在条件为真就不断执行循环体

 for 循环
    语法：
        for 目标 in 表达式：
            循环体
 range()
    for 循环的好伙伴
    语法：
    range([start,] stop[, step=1])
        -这个BIF有3个参数，其中中括号括起来的两个表示这两个参数是可选的。
        -step=1 表示第三个惨数的默认值是1
        -range这个BIF的作用是生成一个从start参数的值开始到stop参数的值结束的数字序列

    break 终止当前循环，也就是跳出循环体， break 只能跳出一层循环

    continue 终止本轮循环并开始下一轮循环*注意：在开始下一轮循环之前，他会先测试以下循环条件
            只有循环条件为ture它才会开始下一轮循环，如果不为ture它会跳出下一轮循环。

#P11 数组1
    列表：
        整数
        浮点数
        字符串
        对象
    列表可以是混合列表包含上面的所有

    我们才开始知道我们会用到一个列表，但又不知道里面有什么，我们乐意创建一个空列表
        empty = []

    向列表里面添加元素
        append() 添加
            member.append() 。可以理解为范围，勇于主谓之间，链接实现函数的角色和函数
                member 是一个对象，append 是这个对象的成员函数。

        extend() 一个扩展的方式
            原理是使用一个列表去扩展另一个列表，所以它的参数应该是一个列表
            member = ['小甲鱼', '小布丁', '黑夜', '迷途', '怡静']
            member.extend(['竹林小溪', 'Crazy迷恋'])

    append 和 extend 都是自动追加到末尾

        insert() 有两个参数，第一个参数代表在列表中的位置， 第二个参数表示在第一个参数的位置插入一个元素

    为什么数字顺序是从0开始？
        -因为计算机是二进制，只有0 和 1 ， 0是最小的数，1是最大的数

#P12 数组2 列表的其它常用方法
    * 跟数组一样， 我们可以通过元素的索引值（index）从列表中获取单个元素，注意，列表索引值是从0开始的

    从列表删除元素
        remove() 参数就是元素的名字

        del() 不是一个列表的方法，他是一个语句

        pop() 从列表中取出最后一个元素并返回给你
            #Python 的列表实际上是利用栈这种数据结构进行存储的。所以可以使用pop这种弹栈的方法
            #剔除哪一个就会显示哪一个 #print(member.pop()) 显示的就是列表的最后一个
            #可以加位置参数，剔除指定位置的值

    列表分片（slice）
        利用索引值， 每次我们可以从列表获取一个元素，但如果一次性需要获取多个元素，有没有办法实现呢？
            利用列表分片我们可以简单的实现这个要求。

#P13 数组3 列表的常用操作符
    *比较操作符
    *逻辑操作符
    *连接操作符
    *重复操作符
    *成员操作符

    列表 + 拼接， *复制若干次

    列表类型的内置函数
     count()
     index()，index(参数，参数起始位置，参数结束位置) #4 同样也只显示在这个范围里第一次出现的位置
     reverse()翻转，前后调换位子, 排序规则， reverse = True 降序
     sort() sort有三个参数， sort(func#指定排序的算法， key#和这个算法搭配的关键字， reverse = False#表示没有逆行)


#P14 元组：一个不可改变的类型
    列表和元组的区别：
        列表：非常灵活，可以任意修改里面的元素 （删除和插入）
        元组：不可以随意删除或插入一个元素

    创建和访问一个元组和列表有什么区别：
        列表：用【】
        元组：（）

    更新和删除一个元组
        如何更新一个字符串？--通过把现有的字符串切片，来构造新的字符串
        字符串和元组一样 元素是不能修改的

    使用del temp会删除整个元组
        Python 会自动回收没有标签的元组

    元组相关的操作符
        逻辑操作符 and or，成员操作符in not in，拼接操作符 +， 重复操作符 *， 关系操作符><,

#P 15 字符串，各种奇葩的内置方法
    capitalize() 把字符串的第一个字符改为大写

    str1 = 'I love fishc.com'
    print(str1[:6])#I love
    print(str1[5])#e
    print(str1[:6] + '插入字符串' + str1[6:])#I love插入字符串 fishc.com

    str2 = 'xiaoxie'
    print(str2.capitalize())#Xiaoxie

    str2 = 'XIAOxie'
    print(str2.casefold())#xiaoxie
            ##注意每次都是返回一个新的字符串

    #center(width) 自动填充长度
    str2 = 'XIAOxie'
    print(str2.center(40))#                XIAOxie

    #count(sub[start[,end]]) 返回子字符串在字符串里出现的次数
    print(str2.count('xi'))#1




