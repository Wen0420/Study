'''

#001
测试题：

0. Python 是什么类型的语言？


1. IDLE 是什么？


2. print() 的作用是什么？


3. Python 中表示乘法的符号是什么？


4. 为什么 >>>print('I love fishc.com ' * 5) 可以正常执行，但 >>>print('I love fishc.com ' + 5) 却报错？


5. 如果我需要在一个字符串中嵌入一个双引号，正确的做法是？


6. 为什么我们要使用 Python3？Python2到底有什么问题？看起来很多程序员依然都在使用Python2？


动动手：

0. 动手试试直接输入>>>5+8 与输入>>>print(5+8) 有何不同？


1. 在交互模式中，使用 Python 计算一年有多少秒？


2. 设置你的操作系统的环境变量，以便可以轻松进入 Python 环境：



回复您的答案即可查看参考答案！


测试题答案：
1.IDLE is Python's Integrated Development and Learning Environment.

2.print 是打印

3.乘法符 是多次复制

4.字符可以被多次复制， 字符+数字 不是同一类型，无法操作

5.使用转义符号\" "

6. 有了更方便的功能

本帖隐藏的内容
0. Python 是什么类型的语言？

Python是脚本语言

脚本语言(Scripting language)是电脑编程语言，因此也能让开发者藉以编写出让电脑听命行事的程序。以简单的方式快速完成某些复杂的事情通常是创造脚本语言的重要原则，基于这项原则，使得脚本语言通常比 C语言、C++语言 或 Java 之类的系统编程语言要简单容易。

也让脚本语言另有一些属于脚本语言的特性：
语法和结构通常比较简单
学习和使用通常比较简单
通常以容易修改程序的“解释”作为运行方式，而不需要“编译”
程序的开发产能优于运行性能

一个脚本可以使得本来要用键盘进行的相互式操作自动化。一个Shell脚本主要由原本需要在命令行输入的命令组成，或在一个文本编辑器中，用户可以使用脚本来把一些常用的操作组合成一组串行。主要用来书写这种脚本的语言叫做脚本语言。很多脚本语言实际上已经超过简单的用户命令串行的指令，还可以编写更复杂的程序。

1. IDLE 是什么？

IDLE是一个Python Shell，shell的意思就是“外壳”，基本上来说，就是一个通过键入文本与程序交互的途径！像我们Windows那个cmd窗口，像Linux那个黑乎乎的命令窗口，他们都是shell，利用他们，我们就可以给操作系统下达命令。同样的，我们可以利用IDLE这个shell与Python进行互动。


2. print() 的作用是什么？

print() 会在输出窗口中显示一些文本（在这一讲中，输出窗口就是IDLE shell窗口）。


3. Python 中表示乘法的符号是什么？

Python中的乘号是*（星号）。


4. 为什么 >>>print('I love fishc.com ' * 5) 可以正常执行，但 >>>print('I love fishc.com ' + 5) 却报错？

在 Python 中不能把两个完全不同的东西加在一起，比如说数字和文本，正是这个原因，>>>print('I love fishc.com ' + 5) 才会报错。这就像是在说“五只小甲鱼加上苍井空会是多少？”一样没有多大意义，结果可能是五，可能是六，也可能是八！不过乘以一个整数来翻倍就具有一定的意义了，前边的例子就是将 "I love fishc.com" 这个字符串打印五次。


5. 如果我需要在一个字符串中嵌入一个双引号，正确的做法是？

你有两个选择：可以利用反斜杠（\）对双引号转义：\"，或者用单引号引起这个字符串。例如：' I l"o"ve fishc.com '。


6. 为什么我们要使用 Python3？Python2到底有什么问题？看起来很多程序员依然都在使用Python2？

确实还有相当多的程序员在使用 Python2，不过 Python3 才是 Python 发展的未来，就像 XP 和 WIN7 一样。在《零基础入门学习Python》的系列教程准备中，小甲鱼发觉 Python3 中的新特性确实很妙，很值得进行深入学习！你也不用担心，如果你了解了 Python3，Python2 的代码阅读对于你来说根本不成问题！



动动手答案：
0. 动手试试直接输入 >>>5+8 与输入 >>>print(5+8) 有何不同？

不妨试试直接直接输入 >>>'I love fishc.com!' 与输入 >>>print('I love fishc.com!') 有何不同？
没错，直接输入是将结果及类型打印到屏幕上，而print是将结果打印到屏幕上，自己试试并观察结果！


1. 在交互模式中，使用 Python 计算一年有多少秒？

>>>print( 365 * 24 * 60 * 60 )
>>>31536000


2. 设置你的操作系统的环境变量，以便可以轻松进入 Python 环境

以小甲鱼的 Windows 7 为例子，其他系统同理：
高级系统设置》系统属性》环境变量》编辑》变量名：path 变量值：C:\Python3
'''

'''
#002
测试题：

0. 什么是BIF？


1. 用课堂上小甲鱼教的方法数一数 Python3 提供了多少个 BIF？


2. 在 Python 看来：'FishC' 和 'fishc' 一样吗？


3. 在小甲鱼看来，Python 中什么是最重要的？你赞同吗？


4. 这节课的例子中出现了“=”和“==”，他们表示不同的含义，你在编程的过程中会不小心把“==”误写成“=”吗？有没有好的办法可以解决这个问题呢？


5. 你听说过“拼接”这个词吗？


动动手：

0. 编写程序：hello.py，要求用户输入姓名并打印“你好，姓名！”

例如：



1. 编写程序：calc.py 要求用户输入1到100之间数字并判断，输入符合要求打印“你妹好漂亮”，不符合要求则打印“你大爷好丑”

例如：



2. 请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！

0. Built in functions 内置函数

1. 35

2. 不一样

3.变量

4.只要记住= 是赋值，== 是等于

5. and
答案
0. 什么是BIF？

BIF 就是 Built-in Functions，内置函数。为了方便程序员快速编写脚本程序（脚本就是要编程速度快快快！！！），Python 提供了非常丰富的内置函数，我们只需要直接调用即可，例如 print() 的功能是“打印到屏幕”，input() 的作用是接收用户输入（注：Python3 用 input() 取代了 Python2 的 raw_input()，用法如有不懂请看视频讲解）。

太多BIF学不过来怎么办？看不懂英文说明怎么办？Python3的资料太少怎么办？没事，有了小甲鱼，妈妈再也不用担心我的学习了！


1. 用课堂上小甲鱼教的方法数一数 Python3 提供了多少个 BIF？

在 Python 或 IDLE 中，输入 dir(__builtins__) 可以看到 Python 提供的内置方法列表（注意，builtins 前后是两个下划线哦）其中小写的就是 BIF。如果想具体查看某个 BIF 的功能，比如 input()，可以在 shell 中输入 help(input)，就会得到这个 BIF 的功能描述。哦，答案应该是 68 个，不信你自己数数看，你们肯定没有自己完成作业就来看答案！哼~ T_T


2. 在 Python 看来：'FishC' 和 'fishc' 一样吗？

不一样，因为 Python 是一个“敏感的小女孩”，所以不要试图欺骗她，对 Python 来说，fishc 和 FishC 是完全不同的两个名字，所以编程的时候一定要当心。不过 Python 会帮助解决可能因此出现的问题，例如只有当标识符已经赋值后（还记得吗，小甲鱼在课堂中说过 Python 的变量是不用先声明的）才能在代码中使用，未赋值的标识符直接使用会导致运行时错误，所以你很快就可以根据经验发现此问题。


3. 在小甲鱼看来，Python 中什么是最重要的？你赞同吗？

缩进！在小甲鱼看来，缩进是 Python 的灵魂，缩进的严格要求使得 Python 的代码显得非常精简并且有层次（小甲鱼阅读过很多大牛的代码，那个乱......C语言不是有国际乱码大赛嘛......）。

所以在 Python 里对待缩进代码要十分小心，如果没有正确地缩进，代码所做的事情可能和你的期望相去甚远（就像C语言里边括号打错了位置）。

如果在正确的位置输入冒号“:”，IDLE 会自动将下一行缩进！


4. 这节课的例子中出现了“=”和“==”，他们表示不同的含义，你在编程的过程中会不小心把“==”误写成“=”吗？有没有好的办法可以解决这个问题呢？
http://www.fishc.com
C语言的话，如果 if( c == 1 ) 写成 if( c = 1 )，程序就完全不按程序员原本的目的去执行，但在 Python 这里，不好意思，行不通，语法错误！Python 不允许 if 条件中赋值，所以 if c = 1: 会报错！

小甲鱼觉得这种做法可以非常有效的防止程序员因为打炮、熬夜等问题导致粗心的 BUG ，并且这类 BUG 杀伤力都巨大！


5. 你听说过“拼接”这个词吗？

在一些编程语言，我们可以将两个字符串“相加”在一起，如：'I' + 'Love' + 'FishC' 会得到 'ILoveFishC'，在 Python 里，这种做法叫做拼接字符串。



动动手答案：


本帖隐藏的内容
0. 编写程序：hello.py，要求用户输入姓名并打印“你好，姓名！”

name = input("请输入您的姓名：")
print('你好，' + name + '!')
复制代码


1. 编写程序：calc.py 要求用户输入1到100之间数字并判断，输入符合要求打印“你妹好漂亮”，不符合要求则打印“你大爷好丑”

temp = input("请输入1到100之间的数字：")
num = int(temp)
if 1 <= num <= 100:
    print('你妹好漂亮^_^')
else:
    print('你大爷好丑T_T')
复制代码


2. 请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！

'''
#002
#2.1
print("请输入您的姓名：")

name = input("请输入您的姓名：")
print("你好，" + name + "!")

#2.1
temp = input("请输入1到100 之间的数字：")
nums = int(temp)
if nums <= 100:
    print("你妹好漂亮")
else:
    print("你大爷好丑T_T")

temp = input("请输入1到100 之间的数字：")
nums = int(temp)
if 1 <= nums <= 100:
    print("你妹好漂亮")
else:
    print("你大爷好丑T_T")

'''
#003
测试题：

0. 以下哪个变量的命名不正确？为什么？

    (A) MM_520  (B) _MM520_  (C) 520_MM  (D) _520_MM
    /c 因为变量名不能以数字开头
    
1. 在不上机的情况下，以下代码你能猜到屏幕会打印什么内容吗？
>>>myteacher = '小甲鱼'
>>>yourteacher = myteacher
>>>yourteacher = '黑夜'
>>>print(myteacher)
/应该会报错吧，yourteacher 有两个赋值

2. 在不上机的情况下，以下代码你能猜到屏幕会打印什么内容吗？
>>> myteacher = '小甲鱼'
>>> yourteacher = myteacher
>>> myteacher = '黑夜'
>>> print(yourteacher)
/应该会报错吧，myteacher 有两个赋值

3. 在不上机的情况下，以下代码你能猜到屏幕会打印什么内容吗？
>>>first = 520
>>>second = '520'
>>>first = second
>>>print(first)
/应该会报错吧，first != second 两个类型

4. 除了使用反斜杠（\）进行字符转义，还有什么方法可以打印：Let's go! 这个字符串？
在前面加r

5. 如果非要在原始字符串结尾输入反斜杠，可以如何灵活处理？
\\?

6. 在这一讲中，我们说变量的命名需要注意一些地方，但小甲鱼在举例的时候貌似却干了点儿“失误”的事儿，你能看得出小甲鱼例子中哪里有问题吗？

动动手：

0. 还记得我们第一讲的动动手的题目吗？这一次要求使用变量，计算一年有多少秒？

提示：可以以 DaysPerYear（每年天数），HoursPerDay（每天小时数），MinutesPerHour（每小时分钟数），SecondsPerMinute（每分钟秒数）为变量名。


1. 关于最后提到的长字符串（三重引号字符串）其实在 Python3 还可以这么写，不妨试试，然后比较下哪种更方便？
测试题答案：
0. 以下哪个变量的命名不正确？为什么？ (A) MM_520 (B) _MM520_ (C) 520_MM (D) _520_MM

(C)选项不正确，因为 Python 中的变量名不能以数字开头。


1. 在不上机的情况下，以下代码你能猜到屏幕会打印什么内容吗？

会打印：小甲鱼


2. 在不上机的情况下，以下代码你能猜到屏幕会打印什么内容吗？

会打印：小甲鱼


3. 在不上机的情况下，以下代码你能猜到屏幕会打印什么内容吗？

会打印：520，注：这里没有单引号括起来，但是他是一个字符串，因为使用 print() 打印，所以不包含单引号。可以试试直接>>>first，它是一个字符串的。


4. 除了使用饭斜杠（\）进行字符转义，还有什么方法可以打印：Let's go! 这个字符串？
r"Let's go!"


5. 如果非要在原始字符串结尾输入反斜杠，可以如何灵活处理？
>>>str = r'C:\Program Files\FishC\Good''\\'
'''
str = r'C:\Program Files\FishC\Good''\\'
print(str)

'''
6. 在这一讲中，我们说变量的命名需要注意一些地方，但小甲鱼在举例的时候貌似却干了点儿“失误”的事儿，你能看得出小甲鱼例子中哪里有问题吗？
在例子中小甲鱼起了个 str 名字的变量，但事实上我们发现，str 的颜色跟普通变量貌似不同？没错，str() 和 print() 都是内置函数，但 Python 貌似不介意我们对内置函数进行赋值操作，所以这点我们以后就要注意啦，否则可能会出现以下的 BUG：

动动手答案：
0. 还记得我们第一讲的动动手的题目吗？这一次要求使用变量，计算一年有多少秒？
DaysPerYear = 365
HoursPerDay = 24
MinutesPerHour = 60
SecondsPerMinute = 60
result = DaysPerYear * HoursPerDay * MinutesPerHour * SecondsPerMinute
print(result)
'''

'''
测试题：

0. 请问以下代码会打印多少次“我爱鱼C！”

while 'C':
    print('我爱鱼C!')
复制代码

一次

1. 请问以下代码会打印多少次“我爱鱼C！”

i = 10
while i:
    print('我爱鱼C!')
    i = i - 1
复制代码
 九次
 
2. 请写出与 10 < cost < 50 等价的表达式
cost > 10 and cost < 50

3. Python3 中，一行可以书写多个语句吗？
可以

4. Python3 中，一个语句可以分成多行书写吗？
可以

5. 请问Python的 and 操作符 和C语言的 && 操作符 有何不同？【该题针对有C或C++基础的朋友】
不知

6. 听说过“短路逻辑（short-circuit logic）”吗？
没有

动动手：

0. 完善第二个改进要求（为用户提供三次机会尝试，机会用完或者用户猜中答案均退出循环）并改进视频中小甲鱼的代码。


1. 尝试写代码实现以下截图功能：



2. 尝试写代码实现以下截图功能：



3. 请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！

 

答案
联系题：

0. 请问以下代码会打印多少次“我爱鱼C！”
while 'C':
    print('我爱鱼C!')
复制代码

死循环，会一直打印“我爱鱼C！”（嗯，这也算是永远支持鱼C的方法之一），直到崩溃或者用户按下快捷键 CTRL + C（强制结束）

造成死循环的原因是 while 后边的条件永远为真(True)，在 Python 看来，只有以下内容会被看作假（注意冒号括号里边啥都没有，连空格都不要有！）：False None 0 "" '' () [] {}

其他一切都被解释为真！
'''
#试一试
while '':
    print("进入循环")
print("退出循环")

while False:
    print("进入循环")
print("退出循环")

while 0:
    print("进入循环")
print("退出循环")

'''
1. 请问以下代码会打印多少次“我爱鱼C！”

会打印 10 次。
2. 请写出与 10 < cost < 50 等价的表达式

(10 < cost) and (cost < 50)


3. Python3 中，一行可以书写多个语句吗？

可以，语句之间用分号隔开即可，不妨试试：
>>> print('I love fishc');print('very much!')
'''
print('I love fishc');print('very much!')
#会自动分为两行

'''
4. Python3 中，一个语句可以分成多行书写吗？

可以，一行过长的语句可以使用反斜杠或者括号分解成几行，不妨试试：

>>> 3 > 4 and \
  1 < 2
复制代码
或者

>>> ( 3 > 4 and
  1 < 2 )
复制代码

6. 听说过“短路逻辑（short-circuit logic）”吗？

逻辑操作符有个有趣的特性：在不需要求值的时候不进行操作。这么说可能比较“高深”，举个例子，表达式 x and y，需要 x 和 y 两个变量同时为真(True)的时候，结果才为真。因此，如果当 x 变量得知是假(False)的时候，表达式就会立刻返回 False，而不用去管 y 变量的值。

这种行为被称为短路逻辑（short-circuit logic）或者惰性求值（lazy evaluation），这种行为同样也应用与 or 操作符，这个后边的课程小甲鱼会讲到，不急。

实际上，Python 的做法是如果 x 为假，表达式会返回 x 的值(0)，否则它就会返回 y 的值（例子参考楼上那题）。

'''